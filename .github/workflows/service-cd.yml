name: Service CD Workflow
on:
  workflow_dispatch:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: hm-service
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: '17'

    - name: create application properties file
      working-directory: ./hm-service
      run: |
        touch ./src/main/resources/application-prod.properties
        echo spring.jpa.hibernate.ddl-auto=update >> ./src/main/resources/application-prod.properties
        echo spring.datasource.url=${{ secrets.DATA_SOURCE_URL }} >> ./src/main/resources/application-prod.properties
        echo spring.datasource.username=${{ secrets.DATA_SOURCE_USERNAME }} >> ./src/main/resources/application-prod.properties
        echo spring.datasource.password=${{ secrets.DATA_SOURCE_PASSWORD }} >> ./src/main/resources/application-prod.properties
        echo spring.jpa.database=mysql >> ./src/main/resources/application-prod.properties
        echo hibernate.connection.driver_class = com.mysql.jdbc.Driver >> ./src/main/resources/application-prod.properties
        echo spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl >> ./src/main/resources/application-prod.properties
        echo spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl >> ./src/main/resources/application-prod.properties
        echo hmservice.security.jwtSecret=${{ secrets.JWT_SECRET }} >> ./src/main/resources/application-prod.properties
        echo hmservice.security.jwtExpirationMs = 86400000 >> ./src/main/resources/application-prod.properties
        echo server.port=80 >> ./src/main/resources/application-prod.properties
# remember application needs to be run with java -jar [application jar] --spring.profiles.active=prod

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Execute Gradle Build
      working-directory: ./hm-service
      run: ./gradlew bootJar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        # role-to-assume: ${{ secrets.ECR_ROLE }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Deploy
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        CLUSTER: ${{ secrets.CLUSTER }}
        SERVICE: ${{ secrets.SERVICE }}
      working-directory: ./hm-service
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
        aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment
        echo "Forcing Service Update To Latest"
